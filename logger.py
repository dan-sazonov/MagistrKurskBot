"""
–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—ã–≤–æ–¥–æ–≤ –ª–æ–≥–≥–µ—Ä–æ–≤. –í—Å–µ–≥–æ 3 —à—Ç—É–∫–∏:
1. —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∞–π–æ–≥—Ä–∞–º–º–æ–≤—Å–∫–∏–π. –∫–∞–∫ —Ç–∞–∫–æ–≤–æ–π –Ω–µ –Ω—É–∂–µ–Ω, –Ω–æ —è –∑–∞—á–µ–º-—Ç–æ —Ä–µ—à–∏–ª –µ–≥–æ –æ—Å—Ç–∞–≤–∏—Ç—å ¬Ø\_(„ÉÑ)_/¬Ø
2. –ª–æ–≥–≥–µ—Ä –∞–ø–¥–µ–π—Ç–æ–≤. –ø–∏—à–µ—Ç –≤ —Ñ–∞–π–ª –≤—Å–µ –ø—Ä–∏–ª–µ—Ç–∞—é—â–∏–µ –Ω–∞ –º–∏–¥–ª–≤–∞—Ä—å –∞–ø–¥–µ–π—Ç—ã
3. –æ—Å–Ω–æ–≤–Ω–æ–π. –ø–∏—à–µ—Ç –≤ –∫–æ–Ω—Å–æ–ª—å –∏ —Ñ–∞–π–ª—ã –∏–Ω—Ñ—É –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏

–ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –º–æ–¥—É–ª—è —Å–æ–∑–¥–∞–µ—Ç –ø–∞–ø–∫—É logs:
./main.log - –¥—É–±–ª–∏—Ä—É–µ—Ç –ª–æ–≥–∏ –∏–∑ IO
./updates.log -  –∞–ø–¥–µ–π—Ç—ã
./warnings.log - –≤–∞—Ä–Ω–∏–Ω–≥–∏ –∏–∑ IO
"""

import logging
import os

_log_format_std = '[%(levelname)s] - %(name)s(%(filename)s, %(lineno)d): %(message)s'
_log_format_file = '%(asctime)s [%(levelname)s] - %(name)s(%(filename)s, %(lineno)d): %(message)s'


def _safe_mkfile(path: str) -> None:
    """
    –°–æ–∑–¥–∞—Å—Ç —Ñ–∞–π–ª –¥–ª—è –ª–æ–≥–æ–≤, –µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω

    :param path: –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º
    :return: None
    """
    if not os.path.exists('./logs'):
        os.mkdir('./logs')
    if not os.path.exists(f'./logs/{path}'):
        open(f'./logs/{path}', 'w+').close()


def _get_file_handler() -> logging.FileHandler:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –ª–æ–≥–µ—Ä–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª –≤–∞—Ä–Ω–∏–Ω–≥–æ–≤

    :return: –æ–±—ä–µ–∫—Ç —Ö—ç–Ω–¥–ª–µ—Ä–∞
    """
    _safe_mkfile('warnings.log')
    file_handler = logging.FileHandler('./logs/warnings.log')
    file_handler.setLevel(logging.WARNING)
    file_handler.setFormatter(logging.Formatter(_log_format_file))
    return file_handler


def _get_stream_handler() -> logging.StreamHandler:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –ª–æ–≥–µ—Ä–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ –ª–æ–≥–æ–≤ –≤ IO –∫–æ–Ω—Å–æ–ª–∏

    :return: –æ–±—ä–µ–∫—Ç —Ö—ç–Ω–¥–ª–µ—Ä–∞
    """
    stream_handler = logging.StreamHandler()
    stream_handler.setLevel(logging.INFO)
    stream_handler.setFormatter(logging.Formatter(_log_format_std))
    return stream_handler


def set_basic_logger() -> None:
    """
    –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∫–æ—Ä–Ω–µ–≤–æ–π –ª–æ–≥–µ—Ä –¥–ª—è aiogram

    :return: None
    """
    _safe_mkfile('main.log')
    logging.basicConfig(level=logging.INFO, filename='./logs/main.log', filemode='w+', format=_log_format_file)


def get_logger(name: str) -> logging.Logger:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –ª–æ–≥–µ—Ä –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –º–æ–¥—É–ª—è—Ö

    :param name: –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–æ–≥–µ—Ä–∞, –≤–µ–∑–¥–µ –ø–æ –ø—Ä–æ–µ–∫—Ç—É - __name__
    :return: –æ–±—ä–µ–∫—Ç –ª–æ–≥–µ—Ä–∞
    """
    logger = logging.getLogger(name)
    logger.setLevel(logging.INFO)
    logger.addHandler(_get_file_handler())
    logger.addHandler(_get_stream_handler())
    return logger


def get_updates_logger() -> logging.Logger:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –ª–æ–≥–µ—Ä –¥–ª—è –∑–∞–ø–∏—Å–∏ –ø—Ä–∏–ª–µ—Ç–∞—é—â–∏—Ö –∞–ø–¥–µ–π—Ç–æ–≤ –≤ —Ñ–∞–π–ª

    :return: –æ–±—ä–µ–∫—Ç –ª–æ–≥–µ—Ä–∞
    """
    file_handler = logging.FileHandler('./logs/updates.log')
    file_handler.setLevel(logging.INFO)
    file_handler.setFormatter(logging.Formatter('%(asctime)s: %(message)s'))

    logger = logging.getLogger('get_updates')
    logger.setLevel(logging.INFO)
    logger.addHandler(file_handler)
    return logger


_log = get_logger(__name__)


def get_last_logs(file: str) -> str:
    """
    –í–µ—Ä–Ω–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ 15 —Å—Ç—Ä–æ–∫ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –ª–æ–≥–æ–≤, –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ. –¢–∞–∫–∂–µ –≤—Å–µ –∑–∞–ø–∏—à–µ—Ç –≤ –ª–æ–≥

    :param file: –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
    :return: —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —é–∑–µ—Ä—É
    """

    if not os.path.exists(f'./logs/{file}.log'):
        _log.warning(f"File `./logs/{file}.log` wasn't found")
        return '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –∏ —ç—Ç–æ—Ç —Ñ–∞–π–ª –∏—Å—á–µ–∑ –ø—Ä—è–º–æ –Ω–∞ –≥–ª–∞–∑–∞—Ö üòê'

    with open(f'./logs/{file}.log', 'r') as f:
        return '\n'.join(f.readlines()[-5:])
