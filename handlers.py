"""
–•—ç–Ω–¥–ª–µ—Ä—ã –±–æ—Ç–∞
–≠—Ç–æ—Ç —Ñ–∞–π–ª –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏, –æ—Ç–≤–µ—á–∞—é—â–∏–µ –∑–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –∞–ø–¥–µ–π—Ç–æ–≤ –Ω–∞ —É—Ä–æ–≤–Ω–µ —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤ –∏–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö,
—Ç–µ–∫—Å—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–∏–π –¥–æ–ª–∂–Ω—ã –ª–µ–∂–∞—Ç—å –≤ —Ñ–∞–π–ª–µ `messages.py`.
"""

import aiogram.dispatcher.filters as dp_filters
from aiogram import types

import config
import db
import logger
from dispatcher import dp, bot, storage
from messages import Messages, Keyboards

log = logger.get_logger(__name__)

# —Ç–∞—â–∏–º –∫–ª–∞—Å—Å—ã —Å–æ–æ–±—â–µ–Ω–∏–π, –∫–Ω–æ–ø–æ–∫ –∏ –±–¥ (–¥–∞, —ç—Ç–æ bad practise, —Å–ø–∞—Å–∏–±–æ, —è –∑–Ω–∞—é)
messages = Messages()
keyboards = Keyboards()
db_main = db.Main()


# –°–õ–£–ñ–ï–ë–ù–´–ï –•–≠–ù–î–õ–ï–†–´:
async def on_startup(_):
    log.info('Start polling')
    await bot.send_message(chat_id=config.ADMIN_CHAT, text=messages.start_polling)


async def on_shutdown(_):
    log.info('Stop polling')
    await bot.close()
    await storage.close()
    await bot.send_message(chat_id=config.ADMIN_CHAT, text=messages.stop_polling)


# –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´:
@dp.message_handler(commands=['songs'])
async def songs_mes(message: types.Message):
    await message.answer(messages.songs, reply_markup=keyboards.get_songs_kb())


@dp.message_handler(commands=['contacts'])
async def contacts_mes(message: types.Message):
    await message.answer(messages.contacts, reply_markup=keyboards.get_contacts_kb())


@dp.message_handler(commands=['howto'])
async def howto_mes(message: types.Message):
    await message.answer(messages.howto)


@dp.message_handler(commands=['team'])
async def team_mes(message: types.Message):
    await message.answer(messages.team)


@dp.message_handler(commands=['memes'])
async def memes_mes(message: types.Message):
    out = db_main.get_random_meme()
    if out:
        await message.answer_photo(out)
    else:
        await message.answer('–ú–µ–º–æ–≤ –Ω–µ—Ç(')


@dp.message_handler(commands=['credits'])
async def memes_mes(message: types.Message):
    await message.answer(messages.credit, disable_web_page_preview=True)


@dp.message_handler(dp_filters.CommandStart())
async def start_mes(message: types.Message):
    await message.answer(messages.subscribe)
    await message.answer(messages.do_unsubscribe)
    db_main.add_user(int(message.from_user.id), message.from_user.username, tuple(message.from_user.full_name.split()))
    log.info(f'A new user has joined: {message.from_user.id}')


@dp.message_handler(commands=['unsubscribe', 'stop'])
async def stop_mes(message: types.Message):
    log.info(f'The user has left the bot: {message.from_user.id}')
    await message.answer(messages.unsubscribe)
    await message.answer(messages.do_subscribe)
    db_main.del_user(int(message.from_user.id))


@dp.message_handler(dp_filters.CommandHelp())
async def help_mes(message: types.Message):
    await message.answer(messages.help, disable_web_page_preview=True)


# –ó–ê–ì–õ–£–®–ö–ò:
@dp.message_handler(commands=['santa', 'end'])
async def outdated_mes(message: types.Message):
    await message.answer(messages.placeholder_santa)


@dp.message_handler(commands=['valentine'])
async def step_0(message: types.Message):
    await message.answer(messages.placeholder_valentine)


@dp.callback_query_handler(
    lambda c: c.data in {'not_rcd', 'start_pol', 'received_btn', 'sent_btn', 'start_btn', 'letter', 'sticker',
                         'title_true', 'title_false', 'send', 'abort'})
async def outdated_callback(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id, text='¬Ø\\_(„ÉÑ)_/¬Ø', show_alert=True)
    log.info(f'The user clicked on an outdated button: {callback_query.id}')


# –ê–î–ú–ò–ù–°–ö–ò–ï –ö–û–ú–ê–ù–î–´:
@dp.message_handler(is_admin=True, commands=['test'])
async def test_state(message: types.Message):
    log.info(f'`{message.from_user.id}` asked the state of the bot')
    await message.answer(f'''üîî <b>–í—Å–µ –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ!</b>
–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–±–µ:
id: {message.from_user.id}
—é–∑–µ—Ä–Ω–µ–π–º: {message.from_user.username}
–∏–º—è: {message.from_user.first_name}
—Ñ–∞–º–∏–ª–∏—è: {message.from_user.last_name}''')


@dp.message_handler(is_admin=True, commands=['disable'])
async def disable_bot(message: types.Message):
    log.info(f'`{message.from_user.id}` stopped the bot')
    await message.answer('üîî –ë–æ—Ç –±—É–¥–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')
    await on_shutdown(None)


@dp.message_handler(content_types=['photo'])
async def scan_message(msg: types.Message):
    document_id = msg.photo[0].file_id
    file_info = await bot.get_file(document_id)
    await msg.reply(f'''file_id: {file_info.file_id}
file_path: {file_info.file_path}''')


@dp.message_handler(is_admin=True, commands=['get'])
async def test_state(message: types.Message):
    file = message.text.split(' ')[-1]
    log.info(f'`{message.from_user.id}` asked the {file} log')

    if file in {'main', 'updates', 'warnings'}:
        await message.answer(logger.get_last_logs(file))
    else:
        log.info(f'Incorrect argument in /get command: {file}')
        await message.answer('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã, –≤—ã–∑–æ–≤–∏ /admin')


@dp.message_handler(is_admin=True, commands=['admin'])
async def test_state(message: types.Message):
    log.info(f'`{message.from_user.id}` asked the admin commands list')
    await message.answer('''–≠—Ç–æ —Å–ø–∏—Å–æ–∫ —Å–µ–∫—Ä–µ—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º –∫–∞–Ω–∞–ª–∞. –ü–æ –º–µ—Ä–µ —Ä–∞–∑–≤–∏—Ç–∏—è –±–æ—Ç–∞ –∏—Ö —Å–ø–∏—Å–æ–∫ –±—É–¥–µ—Ç –ø–æ–ø–æ–ª–Ω—è—Ç—Å—è.

/admin - –ø–æ–∫–∞–∂–µ—Ç —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/test - –±—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞
/disable - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞
/get <i>—á—Ç–æ-—Ç–æ</i> - –≤—ã–≥—Ä—É–∑–∏—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å—Ç—Ä–æ–∫ –æ—Ç—á–µ—Ç–∞. –í–º–µ—Å—Ç–æ <i>"—á—Ç–æ-—Ç–æ"</i> –Ω–∞–¥–æ –Ω–∞–ø–∏—Å–∞—Ç—å —á—Ç–æ-—Ç–æ –∏–∑ —ç—Ç–æ–≥–æ:
    <code>main</code> - –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –æ —Ä–∞–±–æ—Ç–µ
    <code>updates</code> - —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏–ª–µ—Ç–µ–ª–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    <code>warnings</code> - –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏

–í—ã–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã <code>get</code> –ø–æ–∫–∞ —á—Ç–æ –≤—ã–≥–ª—è–¥–∏—Ç –∫—Ä–∞–π–Ω–µ —É–∂–∞—Å–Ω–æ, –Ω–æ –≤ –æ–±–æ–∑—Ä–∏–º–æ–º –±—É–¥—É—â–µ–º –µ–º—É –±—É–¥–µ—Ç –ø—Ä–∏–¥–∞–Ω –±–æ–ª–µ–µ —Å–∏–º–ø–∞—Ç–∏—á–Ω—ã–π –≤–∏–¥.''')


# –ù–ï–ò–ó–í–ï–°–¢–ù–û–ï –°–û–û–ë–©–ï–ù–ò–ï:
@dp.message_handler()
async def unknown_command_mes(message: types.Message):
    await message.reply(messages.not_command)
